plugins:
  - "@typescript-eslint/eslint-plugin"
  - eslint-plugin-deprecation

parser: "@typescript-eslint/parser"

parserOptions:
  project: true
  extraFileExtensions: [.html, .vue, .md, .mdx]

settings:
  import/extensions: [.js, .jsx, .ts, .tsx]
  import/parsers:
    "@typescript-eslint/parser": [.js, .jsx, .ts, .tsx]

overrides:
  - files: ["**/*.ts", "**/*.tsx"]
    settings:
      import/resolver: typescript
  - files: ["**/*.d.ts"]
    rules:
      "@typescript-eslint/consistent-type-definitions": [0]
      "@typescript-eslint/consistent-type-imports": [0]

rules:
  "@typescript-eslint/adjacent-overload-signatures": [0]
  "@typescript-eslint/array-type": [0]
  "@typescript-eslint/await-thenable": [2]
  "@typescript-eslint/ban-ts-comment": [2, {'ts-expect-error': false, 'ts-ignore': true, 'ts-nocheck': false, 'ts-check': false}]
  "@typescript-eslint/ban-tslint-comment": [0]
  "@typescript-eslint/ban-types": [2, {extendDefaults: true, types: {Function: false}}]
  "@typescript-eslint/class-literal-property-style": [0]
  "@typescript-eslint/class-methods-use-this": [0]
  "@typescript-eslint/consistent-generic-constructors": [0]
  "@typescript-eslint/consistent-indexed-object-style": [0]
  "@typescript-eslint/consistent-return": [0]
  "@typescript-eslint/consistent-type-assertions": [2, {assertionStyle: as, objectLiteralTypeAssertions: allow}]
  "@typescript-eslint/consistent-type-definitions": [2, type]
  "@typescript-eslint/consistent-type-exports": [2, {fixMixedExportsWithInlineTypeSpecifier: false}]
  "@typescript-eslint/consistent-type-imports": [2, {prefer: type-imports, fixStyle: separate-type-imports, disallowTypeAnnotations: true}]
  "@typescript-eslint/default-param-last": [0]
  "@typescript-eslint/dot-notation": [0]
  "@typescript-eslint/explicit-function-return-type": [0]
  "@typescript-eslint/explicit-member-accessibility": [0]
  "@typescript-eslint/explicit-module-boundary-types": [0]
  "@typescript-eslint/init-declarations": [0]
  "@typescript-eslint/max-params": [0]
  "@typescript-eslint/member-ordering": [0]
  "@typescript-eslint/method-signature-style": [0]
  "@typescript-eslint/naming-convention": [0]
  "@typescript-eslint/no-array-constructor": [2]
  "@typescript-eslint/no-array-delete": [2]
  "@typescript-eslint/no-base-to-string": [0]
  "@typescript-eslint/no-confusing-non-null-assertion": [2]
  "@typescript-eslint/no-confusing-void-expression": [0]
  "@typescript-eslint/no-dupe-class-members": [0]
  "@typescript-eslint/no-duplicate-enum-values": [2]
  "@typescript-eslint/no-duplicate-type-constituents": [2, {ignoreUnions: true}]
  "@typescript-eslint/no-dynamic-delete": [0]
  "@typescript-eslint/no-empty-function": [0]
  "@typescript-eslint/no-empty-interface": [0]
  "@typescript-eslint/no-empty-object-type": [2]
  "@typescript-eslint/no-explicit-any": [0]
  "@typescript-eslint/no-extra-non-null-assertion": [2]
  "@typescript-eslint/no-extraneous-class": [0]
  "@typescript-eslint/no-floating-promises": [0]
  "@typescript-eslint/no-for-in-array": [2]
  "@typescript-eslint/no-implied-eval": [2]
  "@typescript-eslint/no-import-type-side-effects": [0] # dupe with consistent-type-imports
  "@typescript-eslint/no-inferrable-types": [0]
  "@typescript-eslint/no-invalid-this": [0]
  "@typescript-eslint/no-invalid-void-type": [0]
  "@typescript-eslint/no-loop-func": [0]
  "@typescript-eslint/no-loss-of-precision": [2]
  "@typescript-eslint/no-magic-numbers": [0]
  "@typescript-eslint/no-meaningless-void-operator": [0]
  "@typescript-eslint/no-misused-new": [2]
  "@typescript-eslint/no-misused-promises": [2, {checksVoidReturn: {attributes: false, arguments: false}}]
  "@typescript-eslint/no-mixed-enums": [0]
  "@typescript-eslint/no-namespace": [2]
  "@typescript-eslint/no-non-null-asserted-nullish-coalescing": [0]
  "@typescript-eslint/no-non-null-asserted-optional-chain": [2]
  "@typescript-eslint/no-non-null-assertion": [0]
  "@typescript-eslint/no-redeclare": [0]
  "@typescript-eslint/no-redundant-type-constituents": [2]
  "@typescript-eslint/no-require-imports": [0]
  "@typescript-eslint/no-restricted-imports": [0]
  "@typescript-eslint/no-shadow": [0]
  "@typescript-eslint/no-this-alias": [2]
  "@typescript-eslint/no-unnecessary-boolean-literal-compare": [0]
  "@typescript-eslint/no-unnecessary-condition": [0]
  "@typescript-eslint/no-unnecessary-parameter-property-assignment": [2]
  "@typescript-eslint/no-unnecessary-qualifier": [0]
  "@typescript-eslint/no-unnecessary-template-expression": [0]
  "@typescript-eslint/no-unnecessary-type-arguments": [2]
  "@typescript-eslint/no-unnecessary-type-assertion": [2, typesToIgnore: [HTMLElement]]
  "@typescript-eslint/no-unnecessary-type-constraint": [2]
  "@typescript-eslint/no-unsafe-argument": [0]
  "@typescript-eslint/no-unsafe-assignment": [0]
  "@typescript-eslint/no-unsafe-call": [0]
  "@typescript-eslint/no-unsafe-declaration-merging": [2]
  "@typescript-eslint/no-unsafe-enum-comparison": [2]
  "@typescript-eslint/no-unsafe-member-access": [0]
  "@typescript-eslint/no-unsafe-return": [0]
  "@typescript-eslint/no-unsafe-unary-minus": [2]
  "@typescript-eslint/no-unused-expressions": [0]
  "@typescript-eslint/no-unused-vars": [2, {vars: all, args: all, caughtErrors: all, ignoreRestSiblings: false, argsIgnorePattern: ^_, varsIgnorePattern: "^_[^_]*$", caughtErrorsIgnorePattern: ^_, destructuredArrayIgnorePattern: ^_}]
  "@typescript-eslint/no-use-before-define": [0]
  "@typescript-eslint/no-useless-constructor": [0]
  "@typescript-eslint/no-useless-empty-export": [0]
  "@typescript-eslint/no-var-requires": [2]
  "@typescript-eslint/non-nullable-type-assertion-style": [0]
  "@typescript-eslint/only-throw-error": [2]
  "@typescript-eslint/parameter-properties": [0]
  "@typescript-eslint/prefer-as-const": [2]
  "@typescript-eslint/prefer-destructuring": [0]
  "@typescript-eslint/prefer-enum-initializers": [0]
  "@typescript-eslint/prefer-find": [2]
  "@typescript-eslint/prefer-for-of": [2]
  "@typescript-eslint/prefer-function-type": [2]
  "@typescript-eslint/prefer-includes": [2]
  "@typescript-eslint/prefer-literal-enum-member": [0]
  "@typescript-eslint/prefer-namespace-keyword": [0]
  "@typescript-eslint/prefer-nullish-coalescing": [0]
  "@typescript-eslint/prefer-optional-chain": [2, {requireNullish: true}]
  "@typescript-eslint/prefer-promise-reject-errors": [0]
  "@typescript-eslint/prefer-readonly": [0]
  "@typescript-eslint/prefer-readonly-parameter-types": [0]
  "@typescript-eslint/prefer-reduce-type-parameter": [0]
  "@typescript-eslint/prefer-regexp-exec": [0]
  "@typescript-eslint/prefer-return-this-type": [0]
  "@typescript-eslint/prefer-string-starts-ends-with": [2, {allowSingleElementEquality: always}]
  "@typescript-eslint/promise-function-async": [0]
  "@typescript-eslint/require-array-sort-compare": [0]
  "@typescript-eslint/require-await": [2]
  "@typescript-eslint/restrict-plus-operands": [2]
  "@typescript-eslint/restrict-template-expressions": [0]
  "@typescript-eslint/return-await": [0]
  "@typescript-eslint/strict-boolean-expressions": [0]
  "@typescript-eslint/switch-exhaustiveness-check": [0]
  "@typescript-eslint/triple-slash-reference": [2]
  "@typescript-eslint/typedef": [0]
  "@typescript-eslint/unbound-method": [2]
  "@typescript-eslint/unified-signatures": [2]
  deprecation/deprecation: [2]
  no-array-constructor: [0]
  no-implied-eval: [0]
  no-loss-of-precision: [0]
  no-redeclare: [0] # for overloads
  no-unused-vars: [0]
  require-await: [0]
